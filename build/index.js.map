{"version":3,"sources":["../src/index.js"],"names":["mongoose","connect","process","env","DATABASE","useCreateIndex","useNewUrlParser","useFindAndModify","connection","on","console","error","bind","log","server","ApolloServer","typeDefs","resolvers","schemaDirectives","AuthDirective","context","req","instrospection","playground","listen","port","PORT","then","url"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;;AAIA;;AACA;;AAHA;AAKAA,qBAASC,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,EAAuC;AACrCC,EAAAA,cAAc,EAAE,IADqB;AAErCC,EAAAA,eAAe,EAAE,IAFoB;AAGrCC,EAAAA,gBAAgB,EAAE;AAHmB,CAAvC;;AAMA,IAAMC,UAAU,GAAGR,qBAASQ,UAA5B;AAEAA,UAAU,CAACC,EAAX,CAAc,OAAd,EAAuBC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,mBAA5B,CAAvB;AACAF,UAAU,CAACC,EAAX,CAAc,MAAd,EAAsB;AAAA,SAAMC,OAAO,CAACG,GAAR,CAAY,cAAZ,CAAN;AAAA,CAAtB;AAEA,IAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC9BC,EAAAA,QAAQ,EAARA,kBAD8B;AAE9BC,EAAAA,SAAS,EAATA,qBAF8B;AAG9BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,aAAa,EAAEA;AADC,GAHY;AAM9BC,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,cAAAA,GAAR,QAAQA,GAAR;AAAA,gDAAiB,6BAAWA,GAAX,CAAjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KANuB;AAO9BC,EAAAA,cAAc,EAAE,IAPc;AAQ9BC,EAAAA,UAAU,EAAE;AARkB,CAAjB,CAAf;AAWAT,MAAM,CAACU,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAEvB,OAAO,CAACC,GAAR,CAAYuB,IAAZ,IAAoB;AAA5B,CAAd,EAAkDC,IAAlD,CAAuD,iBAAa;AAAA,MAAVC,GAAU,SAAVA,GAAU;AACjElB,EAAAA,OAAO,CAACG,GAAR,yCAAmCe,GAAnC;AACF,CAFD","sourcesContent":["import { ApolloServer } from 'apollo-server';\r\nimport mongoose from 'mongoose';\r\n\r\nimport { getContext, AuthDirective } from './actions/authActions';\r\n\r\n//require(\"dotenv\").config();\r\n\r\nimport typeDefs from './graphql/schema';\r\nimport resolvers from './graphql/resolvers';\r\n\r\nmongoose.connect(process.env.DATABASE, {\r\n  useCreateIndex: true,\r\n  useNewUrlParser: true,\r\n  useFindAndModify: false\r\n});\r\n\r\nconst connection = mongoose.connection;\r\n\r\nconnection.on('error', console.error.bind(console, 'Error de ConexiÃ³n'));\r\nconnection.on('open', () => console.log('DB Conectada'));\r\n\r\nconst server = new ApolloServer({ \r\n  typeDefs, \r\n  resolvers,\r\n  schemaDirectives: {\r\n    AuthDirective: AuthDirective\r\n  },\r\n  context: async ({req}) => getContext(req),\r\n  instrospection: true,\r\n  playground: true\r\n});\r\n\r\nserver.listen({ port: process.env.PORT || 4000 }).then(({ url }) => {\r\n   console.log(`ğŸš€  Server ready at ${url}`);\r\n});\r\n"],"file":"index.js"}