{"version":3,"sources":["../src/index.js"],"names":["mongoose","connect","useCreateIndex","useNewUrlParser","useFindAndModify","connection","on","console","error","bind","log","server","ApolloServer","typeDefs","resolvers","schemaDirectives","AuthDirective","context","req","listen","process","env","PORT","then"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AAGAA,qBAASC,OAAT,CAAiB,gHAAjB,EAAmI;AACjIC,EAAAA,cAAc,EAAE,IADiH;AAEjIC,EAAAA,eAAe,EAAE,IAFgH;AAGjIC,EAAAA,gBAAgB,EAAE;AAH+G,CAAnI;;AAMA,IAAMC,UAAU,GAAGL,qBAASK,UAA5B;AAEAA,UAAU,CAACC,EAAX,CAAc,OAAd,EAAuBC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,mBAA5B,CAAvB;AACAF,UAAU,CAACC,EAAX,CAAc,MAAd,EAAsB;AAAA,SAAMC,OAAO,CAACG,GAAR,CAAY,cAAZ,CAAN;AAAA,CAAtB;AAEA,IAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC9BC,EAAAA,QAAQ,EAARA,kBAD8B;AAE9BC,EAAAA,SAAS,EAATA,qBAF8B;AAG9BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,aAAa,EAAEA;AADC,GAHY;AAM9BC,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,cAAAA,GAAR,QAAQA,GAAR;AAAA,gDAAiB,6BAAWA,GAAX,CAAjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AANuB,CAAjB,CAAf;AASAP,MAAM,CAACQ,MAAP,CAAcC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAlC,EAAwCC,IAAxC,CAA6C,YAAM;AACjDhB,EAAAA,OAAO,CAACG,GAAR;AACD,CAFD;AAIA;;eAEeC,M","sourcesContent":["\r\nimport { ApolloServer } from 'apollo-server';\r\nimport mongoose from 'mongoose';\r\n\r\nimport { getContext, AuthDirective } from './actions/authActions';\r\n\r\nimport typeDefs from './graphql/schema';\r\nimport resolvers from './graphql/resolvers';\r\n\r\n\r\nmongoose.connect('mongodb+srv://mrdanielfo:corvettez6@clustercintanegra-gzdvg.mongodb.net/cintanegra?retryWrites=true&w=majority', {\r\n  useCreateIndex: true,\r\n  useNewUrlParser: true,\r\n  useFindAndModify: false\r\n});\r\n\r\nconst connection = mongoose.connection;\r\n\r\nconnection.on('error', console.error.bind(console, 'Error de ConexiÃ³n'));\r\nconnection.on('open', () => console.log('DB Conectada'));\r\n\r\nconst server = new ApolloServer({ \r\n  typeDefs, \r\n  resolvers,\r\n  schemaDirectives: {\r\n    AuthDirective: AuthDirective\r\n  },\r\n  context: async ({req}) => getContext(req)\r\n});\r\n\r\nserver.listen(process.env.PORT || 8080).then(() => {\r\n  console.log(`ðŸš€  Server ready at 8080`);\r\n});\r\n\r\n/* TESTING */\r\n\r\nexport default server;\r\n"],"file":"index.js"}