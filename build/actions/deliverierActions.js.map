{"version":3,"sources":["../../src/actions/deliverierActions.js"],"names":["Date","prototype","addDays","days","date","valueOf","setDate","getDate","createToken","deliverier","exp","getTime","payload","_id","email","name","token","jwt","sign","SECRET","createDeliverier","DeliverierModel","create","newDeliverier","getDeliveriers","find","doLoginDeliveriers","password","findOne","bcrypt","compare","passwordb","console","log"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AAEA;AACAA,IAAI,CAACC,SAAL,CAAeC,OAAf,GAAyB,UAAUC,IAAV,EAAgB;AACrC,MAAMC,IAAI,GAAG,IAAIJ,IAAJ,CAAS,KAAKK,OAAL,EAAT,CAAb;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,KAAiBJ,IAA9B;AACA,SAAOC,IAAP;AACH,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAAgB;AAChC,MAAMC,GAAG,GAAG,IAAIV,IAAJ,GAAWE,OAAX,CAAmB,CAAnB,EAAsBS,OAAtB,EAAZ;AACA,MAAMC,OAAO,GAAG;AACZC,IAAAA,GAAG,EAAEJ,UAAU,CAACI,GADJ;AAEZC,IAAAA,KAAK,EAAEL,UAAU,CAACK,KAFN;AAGZC,IAAAA,IAAI,EAAEN,UAAU,CAACM,IAHL;AAIZL,IAAAA,GAAG,EAAHA;AAJY,GAAhB,CAFgC,CAQhC;;AACA,MAAMM,KAAK,GAAGC,yBAAIC,IAAJ,CAASN,OAAT,EAAkBO,aAAlB,CAAd;;AACA,SAAO;AAAEH,IAAAA,KAAK,EAALA;AAAF,GAAP;AACH,CAXD;AAaA;;;AAEO,IAAMI,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,iBAAOX,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEIY,wBAAgBC,MAAhB,CAAuBb,UAAvB,CAFJ;;AAAA;AAElBc,YAAAA,aAFkB;AAGlBP,YAAAA,KAHkB,GAGVR,WAAW,CAACe,aAAD,CAHD;AAAA,6CAIjBP,KAJiB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBI,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;;;AAUA,IAAMI,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAETH,wBAAgBI,IAAhB,EAFS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdD,cAAc;AAAA;AAAA;AAAA,GAApB,C,CAQP;;;;;AAEO,IAAME,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,kBAAOZ,KAAP,EAAca,QAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEDN,wBAAgBO,OAAhB,CAAwB;AAAEd,cAAAA,KAAK,EAAEA;AAAT,aAAxB,CAFC;;AAAA;AAEpBL,YAAAA,UAFoB;;AAAA,iBAGtBA,UAHsB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIEoB,mBAAOC,OAAP,CAAeH,QAAf,EAAyBlB,UAAU,CAACkB,QAApC,CAJF;;AAAA;AAIhBI,YAAAA,SAJgB;;AAAA,iBAKlBA,SALkB;AAAA;AAAA;AAAA;;AAMdf,YAAAA,KANc,GAMNR,WAAW,CAACC,UAAD,CANL;AAAA,8CAOXO,KAPW;;AAAA;AASdA,YAAAA,MATc,GASN,IATM;AAAA,8CAUXA,MAVW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAc1BgB,YAAAA,OAAO,CAACC,GAAR;;AAd0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBP,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\n\r\nimport { SECRET } from '../config/index';\r\n\r\nimport { DeliverierModel } from '../database/models/index';\r\n\r\n// creamos una funcion para Date que nos regresa un nuevo date con N numero de dias agregados.\r\nDate.prototype.addDays = function (days) {\r\n    const date = new Date(this.valueOf());\r\n    date.setDate(date.getDate() + days);\r\n    return date;\r\n}\r\n\r\nconst createToken = (deliverier) => {\r\n    const exp = new Date().addDays(3).getTime();\r\n    const payload = {\r\n        _id: deliverier._id,\r\n        email: deliverier.email,\r\n        name: deliverier.name,\r\n        exp,\r\n    };\r\n    // const token = jwt.sign(payload, process.env.SECRET);\r\n    const token = jwt.sign(payload, SECRET);\r\n    return { token }\r\n}\r\n\r\n/* Las fechas se introducirÃ¡n en formato string en GRAPHQL pero siguiendo la nomenclatura de Date */\r\n\r\nexport const createDeliverier = async (deliverier) => {\r\n    try {\r\n        const newDeliverier = await DeliverierModel.create(deliverier);\r\n        const token = createToken(newDeliverier);\r\n        return token;\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const getDeliveriers = async () => {\r\n    try {\r\n        return await DeliverierModel.find();\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\n// Login para Deliveriers\r\n\r\nexport const doLoginDeliveriers = async (email, password) => {\r\n    try {\r\n        const deliverier = await DeliverierModel.findOne({ email: email })\r\n        if (deliverier) {\r\n            const passwordb = await bcrypt.compare(password, deliverier.password);\r\n            if (passwordb) {\r\n                let token = createToken(deliverier);\r\n                return token;\r\n            } else {\r\n                let token = null;\r\n                return token;\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}"],"file":"deliverierActions.js"}