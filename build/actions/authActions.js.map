{"version":3,"sources":["../../src/actions/authActions.js"],"names":["JWT","require","SchemaDirectiveVisitor","AuthenticationError","AuthDirective","field","resolve","defaultFieldResolver","args","ctx","user","apply","getContext","req","token","headers","authorization","undefined","verify","process","env","SECRET","err","result","UserModel","findOne","_id","then","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAFA;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;eAGwDA,OAAO,CAAC,uBAAD,C;IAAvDC,sB,YAAAA,sB;IAAwBC,mB,YAAAA,mB,EAEhC;;;IACMC,a;;;;;;;;;;;;yCACmBC,K,EAAO;AAAA,2BACmBA,KADnB,CAChBC,OADgB;AAAA,UAChBA,OADgB,+BACNC,oBADM;AAExBF,MAAAA,KAAK,CAACC,OAAN;AAAA;AAAA;AAAA;AAAA,mCAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAmBE,IAAnB;AAAmBA,kBAAAA,IAAnB;AAAA;;AACNC,gBAAAA,GADM,GACAD,IAAI,CAAC,CAAD,CADJ;;AAAA,qBAERC,GAAG,CAACC,IAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGKJ,OAAO,CAACK,KAAR,CAAc,IAAd,EAAoBH,IAApB,CAHL;;AAAA;AAAA;;AAAA;AAAA,sBAKF,IAAIL,mBAAJ,CAAwB,2BAAxB,CALE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB;AAQH;;;EAXuBD,sB,GAc5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AAExB,MAAMC,KAAK,GAAGD,GAAG,CAACE,OAAJ,CAAYC,aAA1B;AACA,MAAI,yBAAOF,KAAP,cAAwBG,SAAxB,0DAAwBA,SAAxB,EAAJ,EAAuC,OAAOJ,GAAP;AAEvC,SAAOb,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBK,OAAO,CAACC,GAAR,CAAYC,MAA9B,EAAsC,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAChE,QAAID,GAAJ,EAAS,OAAOT,GAAP;AACT,WAAOW,iBAAUC,OAAV,CAAkB;AAAEC,MAAAA,GAAG,EAAEH,MAAM,CAACG;AAAd,KAAlB,EAAuCC,IAAvC,CAA4C,UAACjB,IAAD,EAAU;AACzD,+BAAYG,GAAZ;AAAiBH,QAAAA,IAAI,EAAJA;AAAjB;AACH,KAFM,CAAP;AAGH,GALM,CAAP;AAMH,CAXD;;AAaAkB,MAAM,CAACC,OAAP,GAAiB;AACbjB,EAAAA,UAAU,EAAVA,UADa;AAEbR,EAAAA,aAAa,EAAbA;AAFa,CAAjB","sourcesContent":["// paquetes que necesitamos importar\r\nconst JWT = require('jsonwebtoken');\r\nimport { UserModel } from '../database/models/index';\r\n\r\nconst { SchemaDirectiveVisitor, AuthenticationError } = require('apollo-server-express');\r\n\r\n// directiva - valida si esta query necesita un token, de lo contrario no permite ejecutar la consulta\r\nclass AuthDirective extends SchemaDirectiveVisitor {\r\n    visitFieldDefinition(field) {\r\n        const { resolve = defaultFieldResolver } = field;\r\n        field.resolve = async function (...args) {\r\n            const ctx = args[2];\r\n            if (ctx.user) {\r\n                return await resolve.apply(this, args);\r\n            } else {\r\n                throw new AuthenticationError(\"You need to be logged in.\");\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// contexto\r\n// para autorizar request se hacen los siguientes pasos\r\n// paso 1 - saca el autorization de los headers en el request\r\n// paso 2 - valida si el header token esta indefinido\r\n// paso 3 - verifica que el token sea valido\r\n// paso 4 - si es un token valido busca al usuario en la base de datos y asigna la informacion del usuario en el contexto\r\n// paso 5 - si hay algun error siempre regresa lo que trae req\r\nconst getContext = (req) => {\r\n    \r\n    const token = req.headers.authorization;\r\n    if (typeof token === typeof undefined) return req;\r\n\r\n    return JWT.verify(token, process.env.SECRET, function (err, result) {\r\n        if (err) return req;\r\n        return UserModel.findOne({ _id: result._id }).then((user) => {\r\n            return { ...req, user };\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n    getContext,\r\n    AuthDirective,\r\n}"],"file":"authActions.js"}