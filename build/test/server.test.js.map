{"version":3,"sources":["../../src/test/server.test.js"],"names":["server","require","request","should","HOST","token","describe","it","done","json","operation","query","variables","post","url","err","res","body","not","exist","expect","statusCode","toBe","have","property","data","addUser","headers","books","console","log"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBE,MAAhB,EAAf;;AAGA,IAAMC,IAAI,GAAG,uBAAb;AACA,IAAIC,KAAJ;AACAC,QAAQ,CAAC,WAAD,EAAc,YAAM;AACxBC,EAAAA,EAAE,CAAC,gCAAD,EAAmC,UAASC,IAAT,EAAgB;AACjD,QAAMC,IAAI,GAAG;AACTC,MAAAA,SAAS,EAAE,IADF;AAETC,MAAAA,KAAK,EAAE,oEAFE;AAGTC,MAAAA,SAAS,EAAE;AACX,gBAAS;AACD,kBAAS,WADR;AAED,sBAAY,gBAFX;AAGD,mBAAU,gBAHT;AAID,sBAAY;AAJX;AADE;AAHF,KAAb;AAaAV,IAAAA,OAAO,CAACW,IAAR,CAAa;AACTC,MAAAA,GAAG,EAAEV,IADI;AAETK,MAAAA,IAAI,EAAJA;AAFS,KAAb,EAGG,UAASM,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACxBd,MAAAA,MAAM,CAACe,GAAP,CAAWC,KAAX,CAAiBJ,GAAjB;AACAZ,MAAAA,MAAM,CAACgB,KAAP,CAAaH,GAAb;AACAI,MAAAA,MAAM,CAACJ,GAAG,CAACK,UAAL,CAAN,CAAuBC,IAAvB,CAA4B,GAA5B;AACAL,MAAAA,IAAI,CAACd,MAAL,CAAYoB,IAAZ,CAAiBC,QAAjB,CAA0B,MAA1B;AACAnB,MAAAA,KAAK,GAAGY,IAAI,CAACQ,IAAL,CAAUC,OAAV,CAAkBrB,KAA1B;AAEAG,MAAAA,IAAI,CAACO,GAAD,CAAJ;AACH,KAXD;AAYH,GA1BC,CAAF;AA2BAR,EAAAA,EAAE,CAAC,+BAAD,EAAkC,UAAUC,IAAV,EAAgB;AAChD,QAAMC,IAAI,GAAG;AACTC,MAAAA,SAAS,EAAE,IADF;AAETC,MAAAA,KAAK,EAAE;AAFE,KAAb;AAKAT,IAAAA,OAAO,CAACW,IAAR,CAAa;AACTC,MAAAA,GAAG,EAAEV,IADI;AAETK,MAAAA,IAAI,EAAJA,IAFS;AAGTkB,MAAAA,OAAO,EAAE;AACL,yBAAkBtB;AADb;AAHA,KAAb,EAMG,UAASU,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAwB;AACvB,UAAMW,KAAK,GAAGX,IAAI,CAACQ,IAAL,CAAUG,KAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACApB,MAAAA,IAAI,CAACO,GAAD,CAAJ;AACH,KAVD;AAYH,GAlBC,CAAF;AAmBH,CA/CO,CAAR","sourcesContent":["const server = require('../index');\r\nconst request = require('request');\r\nconst should = require('chai').should();\r\n\r\n\r\nconst HOST = 'http://localhost:4000';\r\nlet token;\r\ndescribe('server on', () => {\r\n    it('Debería registrar a un usuario', function(done)  {\r\n        const json = {\r\n            operation: null,\r\n            query: \"mutation addUser($data: UserInput) { addUser(data:$data) {token} }\",\r\n            variables: { \r\n            \"data\" : {\r\n                    \"name\" : \"user test\",\r\n                    \"lastName\": \"last name test\",\r\n                    \"email\" : \"test@gmail.com\",\r\n                    \"password\": \"123\"\r\n                }\r\n            }   \r\n        };\r\n\r\n        request.post({\r\n            url: HOST,\r\n            json\r\n        }, function(err, res, body) {\r\n            should.not.exist(err);\r\n            should.exist(res);\r\n            expect(res.statusCode).toBe(200);\r\n            body.should.have.property('data');\r\n            token = body.data.addUser.token;\r\n            \r\n            done(err);\r\n        })\r\n    });\r\n    it('Debe hacer petición de libros', function (done) {\r\n        const json = {\r\n            operation: null,\r\n            query: \"{ books{ title } }\",\r\n        };\r\n\r\n        request.post({\r\n            url: HOST,\r\n            json,\r\n            headers: {\r\n                \"Authorization\" : token\r\n            }\r\n        }, function(err, res, body){\r\n            const books = body.data.books;\r\n            console.log(books)\r\n            done(err);\r\n        })\r\n\r\n    })\r\n});"],"file":"server.test.js"}