{"version":3,"sources":["../../../src/database/schemas/UserSchema.js"],"names":["mongoose","require","Schema","UserSchema","name","type","String","required","lastName","email","password","gender","timestamps","Types","ObjectId","prototype","valueOf","toString","pre","next","user","bcrypt","genSalt","err","salt","hash","module","exports"],"mappings":";;;;AACA;;AADA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAGA,IAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAxB;AAEA,IAAMC,UAAU,GAAG,IAAID,MAAJ,CAAW;AAC1BE,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAEFC,IAAAA,QAAQ,EAAE;AAFR,GADoB;AAK1BC,EAAAA,QAAQ,EAAE;AACNH,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GALgB;AAS1BE,EAAAA,KAAK,EAAE;AACHJ,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE;AAFP,GATmB;AAa1BG,EAAAA,QAAQ,EAAE;AACNL,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GAbgB;AAiB1BI,EAAAA,MAAM,EAAE;AACJN,IAAAA,IAAI,EAAEC,MADF;AAEJ,YAAM,CAAC,QAAD,EAAW,OAAX;AAFF;AAjBkB,CAAX,EAqBjB;AAAEM,EAAAA,UAAU,EAAE;AAAd,CArBiB,CAAnB;;AAuBAZ,QAAQ,CAACa,KAAT,CAAeC,QAAf,CAAwBC,SAAxB,CAAkCC,OAAlC,GAA4C,YAAY;AACpD,SAAO,KAAKC,QAAL,EAAP;AACH,CAFD;;AAIAd,UAAU,CAACe,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAgB;AACnC,MAAIC,IAAI,GAAG,IAAX;;AACAC,qBAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC9BH,uBAAOI,IAAP,CAAYL,IAAI,CAACV,QAAjB,EAA2Bc,IAA3B,EAAiC,UAACD,GAAD,EAAME,IAAN,EAAe;AAC5C,UAAGF,GAAH,EAAQ,OAAOJ,IAAI,CAACI,GAAD,CAAX;AACRH,MAAAA,IAAI,CAACV,QAAL,GAAgBe,IAAhB;AACAN,MAAAA,IAAI;AACP,KAJD;AAKH,GAND;AAQH,CAVD;AAYAO,MAAM,CAACC,OAAP,GAAiBxB,UAAjB","sourcesContent":["const mongoose = require('mongoose');\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst UserSchema = new Schema({\r\n    name: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    lastName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    gender: {\r\n        type: String,\r\n        enum: ['HOMBRE', 'MUJER']\r\n    }\r\n},{ timestamps: true });\r\n\r\nmongoose.Types.ObjectId.prototype.valueOf = function () {\r\n    return this.toString();\r\n};\r\n\r\nUserSchema.pre(\"save\", function(next)  {\r\n    let user = this;\r\n    bcrypt.genSalt(10, (err, salt) => {\r\n        bcrypt.hash(user.password, salt, (err, hash) => {\r\n            if(err) return next(err);\r\n            user.password = hash;\r\n            next();\r\n        })\r\n    })\r\n    \r\n})\r\n\r\nmodule.exports = UserSchema; "],"file":"UserSchema.js"}