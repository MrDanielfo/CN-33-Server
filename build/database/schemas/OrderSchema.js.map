{"version":3,"sources":["../../../src/database/schemas/OrderSchema.js"],"names":["mongoose","require","Schema","OrderSchema","user","type","Types","ObjectId","ref","orders","restaurant","deliverier","orderName","pieces","Number","pricePerPiece","sendPrice","required","total","delivered","Boolean","paid","date","Date","now","timestamps","prototype","valueOf","toString","module","exports"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAxB;AAEA,IAAMC,WAAW,GAAG,IAAID,MAAJ,CAAW;AAC3BE,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QADjB;AAEFC,IAAAA,GAAG,EAAE;AAFH,GADqB;AAK3BC,EAAAA,MAAM,EAAE,CACJ;AACIC,IAAAA,UAAU,EAAE;AACRL,MAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QADX;AAERC,MAAAA,GAAG,EAAE;AAFG,KADhB;AAKIG,IAAAA,UAAU,EAAE;AACRN,MAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QADX;AAERC,MAAAA,GAAG,EAAE;AAFG,KALhB;AASII,IAAAA,SAAS,EAAE;AACPP,MAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QADZ;AAEPC,MAAAA,GAAG,EAAE;AAFE,KATf;AAaIK,IAAAA,MAAM,EAAE;AACJR,MAAAA,IAAI,EAAES,MADF;AAEJ,iBAAS;AAFL,KAbZ;AAiBIC,IAAAA,aAAa,EAAE;AACXV,MAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QADR;AAEXC,MAAAA,GAAG,EAAE;AAFM,KAjBnB;AAqBIQ,IAAAA,SAAS,EAAE;AACPX,MAAAA,IAAI,EAAES,MADC;AAEPG,MAAAA,QAAQ,EAAE;AAFH,KArBf;AAyBIC,IAAAA,KAAK,EAAE;AACHb,MAAAA,IAAI,EAAES,MADH;AAEHG,MAAAA,QAAQ,EAAE;AAFP,KAzBX;AA6BIE,IAAAA,SAAS,EAAE;AACPd,MAAAA,IAAI,EAAEe,OADC;AAEP,iBAAS;AAFF,KA7Bf;;AAiCI;AACAC,IAAAA,IAAI,EAAE;AACFhB,MAAAA,IAAI,EAAEe,OADJ;AAEF,iBAAS;AAFP,KAlCV;AAsCIE,IAAAA,IAAI,EAAE;AACFjB,MAAAA,IAAI,EAAEkB,IADJ;AAEF,iBAASA,IAAI,CAACC,GAAL;AAFP;AAtCV,GADI;AALmB,CAAX,EAmDjB;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAnDiB,CAApB,C,CAqDA;;AACAzB,QAAQ,CAACM,KAAT,CAAeC,QAAf,CAAwBmB,SAAxB,CAAkCC,OAAlC,GAA4C,YAAY;AACpD,SAAO,KAAKC,QAAL,EAAP;AACH,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiB3B,WAAjB","sourcesContent":["const mongoose = require('mongoose');\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst OrderSchema = new Schema({\r\n    user: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'User'\r\n    },\r\n    orders: [\r\n        {\r\n            restaurant: {\r\n                type: Schema.Types.ObjectId,\r\n                ref: 'Restaurants'\r\n            },\r\n            deliverier: {\r\n                type: Schema.Types.ObjectId,\r\n                ref: 'Deliveries'\r\n            },\r\n            orderName: {\r\n                type: Schema.Types.ObjectId,\r\n                ref: 'Restaurants'\r\n            },\r\n            pieces: {\r\n                type: Number,\r\n                default: 1\r\n            },\r\n            pricePerPiece: {\r\n                type: Schema.Types.ObjectId,\r\n                ref: 'Restaurants'\r\n            },\r\n            sendPrice: {\r\n                type: Number,\r\n                required: true\r\n            },\r\n            total: {\r\n                type: Number,\r\n                required: true\r\n            },\r\n            delivered: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            /* o bien puede llamarse status y ser un enum */\r\n            paid: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            date: {\r\n                type: Date,\r\n                default: Date.now()\r\n            }\r\n        }\r\n    ],\r\n\r\n}, { timestamps: true });\r\n\r\n// Para buena ejecuci√≥n con GraphQL\r\nmongoose.Types.ObjectId.prototype.valueOf = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = OrderSchema;"],"file":"OrderSchema.js"}